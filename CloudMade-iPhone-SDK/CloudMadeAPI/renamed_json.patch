diff --git a/Classes/NSObject+SBJSON.h b/Classes/NSObject+SBJSON.h
index 8e9620e..21ec724 100644
--- a/Classes/NSObject+SBJSON.h
+++ b/Classes/NSObject+SBJSON.h
@@ -37,7 +37,7 @@
  of standard objects to the objects themselves. This means you can call the
  -JSONRepresentation method on an NSArray object and it'll do what you want.
  */
-@interface NSObject (NSObject_SBJSON)
+@interface NSObject (NSObject_CMSBJSON)
 
 /**
  @brief Returns a string containing the receiver encoded in JSON.
diff --git a/Classes/NSObject+SBJSON.m b/Classes/NSObject+SBJSON.m
index 30570b5..4795e41 100644
--- a/Classes/NSObject+SBJSON.m
+++ b/Classes/NSObject+SBJSON.m
@@ -30,10 +30,10 @@
 #import "NSObject+SBJSON.h"
 #import "SBJsonWriter.h"
 
-@implementation NSObject (NSObject_SBJSON)
+@implementation NSObject (NSObject_CMSBJSON)
 
 - (NSString *)JSONRepresentation {
-    SBJsonWriter *jsonWriter = [SBJsonWriter new];    
+    CM_SBJsonWriter *jsonWriter = [CM_SBJsonWriter new];    
     NSString *json = [jsonWriter stringWithObject:self];
     if (!json)
         NSLog(@"-JSONRepresentation failed. Error trace is: %@", [jsonWriter errorTrace]);
diff --git a/Classes/NSString+SBJSON.h b/Classes/NSString+SBJSON.h
index 029aa30..cca985f 100644
--- a/Classes/NSString+SBJSON.h
+++ b/Classes/NSString+SBJSON.h
@@ -34,7 +34,7 @@
  
 This is a category on NSString that adds methods for parsing the target string.
 */
-@interface NSString (NSString_SBJSON)
+@interface NSString (NSString_CMSBJSON)
 
 /**
  @brief Returns the NSDictionary or NSArray represented by the current string's JSON representation.
diff --git a/Classes/NSString+SBJSON.m b/Classes/NSString+SBJSON.m
index bb132e1..c07b2f9 100644
--- a/Classes/NSString+SBJSON.m
+++ b/Classes/NSString+SBJSON.m
@@ -30,11 +30,11 @@
 #import "NSString+SBJSON.h"
 #import "SBJsonParser.h"
 
-@implementation NSString (NSString_SBJSON)
+@implementation NSString (NSString_CMSBJSON)
 
 - (id)JSONValue
 {
-    SBJsonParser *jsonParser = [SBJsonParser new];
+    CM_SBJsonParser *jsonParser = [CM_SBJsonParser new];
     id repr = [jsonParser objectWithString:self];
     if (!repr)
         NSLog(@"-JSONValue failed. Error trace is: %@", [jsonParser errorTrace]);
diff --git a/Classes/SBJsonBase.h b/Classes/SBJsonBase.h
index 7b10844..1d09934 100644
--- a/Classes/SBJsonBase.h
+++ b/Classes/SBJsonBase.h
@@ -52,7 +52,7 @@ enum {
 
  This class contains the common error-handling code and option between the parser/writer.
  */
-@interface SBJsonBase : NSObject {
+@interface CM_SBJsonBase : NSObject {
     NSMutableArray *errorTrace;
 
 @protected
diff --git a/Classes/SBJsonBase.m b/Classes/SBJsonBase.m
index 6684325..34225b5 100644
--- a/Classes/SBJsonBase.m
+++ b/Classes/SBJsonBase.m
@@ -31,7 +31,7 @@
 NSString * SBJSONErrorDomain = @"org.brautaset.JSON.ErrorDomain";
 
 
-@implementation SBJsonBase
+@implementation CM_SBJsonBase
 
 @synthesize errorTrace;
 @synthesize maxDepth;
diff --git a/Classes/SBJsonParser.h b/Classes/SBJsonParser.h
index feaccd8..e398c32 100644
--- a/Classes/SBJsonParser.h
+++ b/Classes/SBJsonParser.h
@@ -51,7 +51,7 @@
  We can thus avoid any loss of precision as JSON allows ridiculously large numbers.
  
  */
-@interface SBJsonParser : SBJsonBase {
+@interface CM_SBJsonParser : CM_SBJsonBase {
     
 @private
     const char *c;
diff --git a/Classes/SBJsonParser.m b/Classes/SBJsonParser.m
index 520cecf..a117876 100644
--- a/Classes/SBJsonParser.m
+++ b/Classes/SBJsonParser.m
@@ -29,7 +29,7 @@
 
 #import "SBJsonParser.h"
 
-@interface SBJsonParser ()
+@interface CM_SBJsonParser ()
 
 - (BOOL)scanValue:(NSObject **)o;
 
@@ -54,7 +54,7 @@
 #define skipDigits(c) while (isdigit(*c)) c++
 
 
-@implementation SBJsonParser
+@implementation CM_SBJsonParser
 
 static char ctrl[0x22];
 
diff --git a/Classes/SBJsonStreamWriter.h b/Classes/SBJsonStreamWriter.h
index 5918160..0b811e6 100644
--- a/Classes/SBJsonStreamWriter.h
+++ b/Classes/SBJsonStreamWriter.h
@@ -32,7 +32,7 @@
 
 #import <Foundation/Foundation.h>
 
-@class SBJsonStreamWriterState;
+@class CM_SBJsonStreamWriterState;
 
 /**
  @brief The Stream Writer class.
@@ -55,10 +55,10 @@
  
  */
 
-@interface SBJsonStreamWriter : NSObject {
+@interface CM_SBJsonStreamWriter : NSObject {
 @private
 	NSString *error;
-	SBJsonStreamWriterState **states;
+	CM_SBJsonStreamWriterState **states;
 	NSOutputStream *stream;
 	NSUInteger depth, maxDepth;
     BOOL sortKeys, humanReadable;
diff --git a/Classes/SBJsonStreamWriter.m b/Classes/SBJsonStreamWriter.m
index 4e367fb..929c950 100644
--- a/Classes/SBJsonStreamWriter.m
+++ b/Classes/SBJsonStreamWriter.m
@@ -33,7 +33,7 @@
 #import "SBJsonStreamWriter.h"
 #import "SBProxyForJson.h"
 
-@interface SBJsonStreamWriter ()
+@interface CM_SBJsonStreamWriter ()
 @property(copy) NSString *error;
 @property(readonly) NSObject **states;
 @property(readonly) NSUInteger depth;
@@ -42,125 +42,125 @@
 - (void)write:(char const *)utf8 len:(NSUInteger)len;
 @end
 
-@interface SBJsonStreamWriterState : NSObject
-- (BOOL)isInvalidState:(SBJsonStreamWriter*)writer;
-- (void)appendSeparator:(SBJsonStreamWriter*)writer;
-- (BOOL)expectingKey:(SBJsonStreamWriter*)writer;
-- (void)transitionState:(SBJsonStreamWriter*)writer;
-- (void)appendWhitespace:(SBJsonStreamWriter*)writer;
+@interface CM_SBJsonStreamWriterState : NSObject
+- (BOOL)isInvalidState:(CM_SBJsonStreamWriter*)writer;
+- (void)appendSeparator:(CM_SBJsonStreamWriter*)writer;
+- (BOOL)expectingKey:(CM_SBJsonStreamWriter*)writer;
+- (void)transitionState:(CM_SBJsonStreamWriter*)writer;
+- (void)appendWhitespace:(CM_SBJsonStreamWriter*)writer;
 @end
 
-@interface SBJsonStreamWriterStateObjectStart : SBJsonStreamWriterState
+@interface CM_SBJsonStreamWriterStateObjectStart : CM_SBJsonStreamWriterState
 @end
 
-@interface SBJsonStreamWriterStateObjectKey : SBJsonStreamWriterStateObjectStart
+@interface CM_SBJsonStreamWriterStateObjectKey : CM_SBJsonStreamWriterStateObjectStart
 @end
 
-@interface SBJsonStreamWriterStateObjectValue : SBJsonStreamWriterState
+@interface CM_SBJsonStreamWriterStateObjectValue : CM_SBJsonStreamWriterState
 @end
 
-@interface SBJsonStreamWriterStateArrayStart : SBJsonStreamWriterState
+@interface CM_SBJsonStreamWriterStateArrayStart : CM_SBJsonStreamWriterState
 @end
 
-@interface SBJsonStreamWriterStateArrayValue : SBJsonStreamWriterState
+@interface CM_SBJsonStreamWriterStateArrayValue : CM_SBJsonStreamWriterState
 @end
 
-@interface SBJsonStreamWriterStateStart : SBJsonStreamWriterState
+@interface CM_SBJsonStreamWriterStateStart : CM_SBJsonStreamWriterState
 @end
 
-@interface SBJsonStreamWriterStateComplete : SBJsonStreamWriterState
+@interface CM_SBJsonStreamWriterStateComplete : CM_SBJsonStreamWriterState
 @end
 
-@interface SBJsonStreamWriterStateError : SBJsonStreamWriterState
+@interface CM_SBJsonStreamWriterStateError : CM_SBJsonStreamWriterState
 @end
 
 static NSMutableDictionary *stringCache;
 static NSDecimalNumber *notANumber;
 
 // States
-static SBJsonStreamWriterStateStart *kSBJsonStreamWriterStateStart;
-static SBJsonStreamWriterStateComplete *kSBJsonStreamWriterStateComplete;
-static SBJsonStreamWriterStateError *kSBJsonStreamWriterStateError;
-static SBJsonStreamWriterStateObjectStart *kSBJsonStreamWriterStateObjectStart;
-static SBJsonStreamWriterStateObjectKey *kSBJsonStreamWriterStateObjectKey;
-static SBJsonStreamWriterStateObjectValue *kSBJsonStreamWriterStateObjectValue;
-static SBJsonStreamWriterStateArrayStart *kSBJsonStreamWriterStateArrayStart;
-static SBJsonStreamWriterStateArrayValue *kSBJsonStreamWriterStateArrayValue;
-
-
-@implementation SBJsonStreamWriterState
-- (BOOL)isInvalidState:(SBJsonStreamWriter*)writer { return NO; }
-- (void)appendSeparator:(SBJsonStreamWriter*)writer {}
-- (BOOL)expectingKey:(SBJsonStreamWriter*)writer { return NO; }
-- (void)transitionState:(SBJsonStreamWriter *)writer {}
-- (void)appendWhitespace:(SBJsonStreamWriter*)writer {
+static CM_SBJsonStreamWriterStateStart *kSBJsonStreamWriterStateStart;
+static CM_SBJsonStreamWriterStateComplete *kSBJsonStreamWriterStateComplete;
+static CM_SBJsonStreamWriterStateError *kSBJsonStreamWriterStateError;
+static CM_SBJsonStreamWriterStateObjectStart *kSBJsonStreamWriterStateObjectStart;
+static CM_SBJsonStreamWriterStateObjectKey *kSBJsonStreamWriterStateObjectKey;
+static CM_SBJsonStreamWriterStateObjectValue *kSBJsonStreamWriterStateObjectValue;
+static CM_SBJsonStreamWriterStateArrayStart *kSBJsonStreamWriterStateArrayStart;
+static CM_SBJsonStreamWriterStateArrayValue *kSBJsonStreamWriterStateArrayValue;
+
+
+@implementation CM_SBJsonStreamWriterState
+- (BOOL)isInvalidState:(CM_SBJsonStreamWriter*)writer { return NO; }
+- (void)appendSeparator:(CM_SBJsonStreamWriter*)writer {}
+- (BOOL)expectingKey:(CM_SBJsonStreamWriter*)writer { return NO; }
+- (void)transitionState:(CM_SBJsonStreamWriter *)writer {}
+- (void)appendWhitespace:(CM_SBJsonStreamWriter*)writer {
 	[writer write:"\n" len:1];
 	for (int i = 0; i < writer.depth; i++)
 	    [writer write:"  " len: 2];
 }
 @end
 
-@implementation SBJsonStreamWriterStateObjectStart
-- (void)transitionState:(SBJsonStreamWriter *)writer {
+@implementation CM_SBJsonStreamWriterStateObjectStart
+- (void)transitionState:(CM_SBJsonStreamWriter *)writer {
 	writer.states[writer.depth] = kSBJsonStreamWriterStateObjectValue;
 }
-- (BOOL)expectingKey:(SBJsonStreamWriter *)writer {
+- (BOOL)expectingKey:(CM_SBJsonStreamWriter *)writer {
 	writer.error = @"JSON object key must be string";
 	return YES;
 }
 @end
 
-@implementation SBJsonStreamWriterStateObjectKey
-- (void)appendSeparator:(SBJsonStreamWriter *)writer {
+@implementation CM_SBJsonStreamWriterStateObjectKey
+- (void)appendSeparator:(CM_SBJsonStreamWriter *)writer {
 	[writer write:"," len:1];
 }
 @end
 
-@implementation SBJsonStreamWriterStateObjectValue
-- (void)appendSeparator:(SBJsonStreamWriter *)writer {
+@implementation CM_SBJsonStreamWriterStateObjectValue
+- (void)appendSeparator:(CM_SBJsonStreamWriter *)writer {
 	[writer write:":" len:1];
 }
-- (void)transitionState:(SBJsonStreamWriter *)writer {
+- (void)transitionState:(CM_SBJsonStreamWriter *)writer {
 	writer.states[writer.depth] = kSBJsonStreamWriterStateObjectKey;
 }
-- (void)appendWhitespace:(SBJsonStreamWriter *)writer {
+- (void)appendWhitespace:(CM_SBJsonStreamWriter *)writer {
 	[writer write:" " len:1];
 }
 @end
 
-@implementation SBJsonStreamWriterStateArrayStart
-- (void)transitionState:(SBJsonStreamWriter *)writer {
+@implementation CM_SBJsonStreamWriterStateArrayStart
+- (void)transitionState:(CM_SBJsonStreamWriter *)writer {
 	writer.states[writer.depth] = kSBJsonStreamWriterStateArrayValue;
 }
 @end
 
-@implementation SBJsonStreamWriterStateArrayValue
-- (void)appendSeparator:(SBJsonStreamWriter *)writer {
+@implementation CM_SBJsonStreamWriterStateArrayValue
+- (void)appendSeparator:(CM_SBJsonStreamWriter *)writer {
 	[writer write:"," len:1];
 }
 @end
 
-@implementation SBJsonStreamWriterStateStart
-- (void)transitionState:(SBJsonStreamWriter *)writer {
+@implementation CM_SBJsonStreamWriterStateStart
+- (void)transitionState:(CM_SBJsonStreamWriter *)writer {
 	writer.states[writer.depth] = kSBJsonStreamWriterStateComplete;
 	[writer.stream close];
 }
-- (void)appendSeparator:(SBJsonStreamWriter *)writer {
+- (void)appendSeparator:(CM_SBJsonStreamWriter *)writer {
 	[writer.stream open];
 }
 @end
 
-@implementation SBJsonStreamWriterStateComplete
-- (BOOL)isInvalidState:(SBJsonStreamWriter*)writer {
+@implementation CM_SBJsonStreamWriterStateComplete
+- (BOOL)isInvalidState:(CM_SBJsonStreamWriter*)writer {
 	writer.error = @"Stream is closed";
 	return YES;
 }
 @end
 
-@implementation SBJsonStreamWriterStateError
+@implementation CM_SBJsonStreamWriterStateError
 @end
 
-@implementation SBJsonStreamWriter
+@implementation CM_SBJsonStreamWriter
 
 @synthesize error;
 @dynamic depth;
@@ -174,14 +174,14 @@ static SBJsonStreamWriterStateArrayValue *kSBJsonStreamWriterStateArrayValue;
 	notANumber = [NSDecimalNumber notANumber];
 	stringCache = [NSMutableDictionary new];
 
-	kSBJsonStreamWriterStateStart = [SBJsonStreamWriterStateStart new];
-	kSBJsonStreamWriterStateComplete = [SBJsonStreamWriterStateComplete new];
-	kSBJsonStreamWriterStateError = [SBJsonStreamWriterStateError new];
-	kSBJsonStreamWriterStateObjectStart = [SBJsonStreamWriterStateObjectStart new];
-	kSBJsonStreamWriterStateObjectKey = [SBJsonStreamWriterStateObjectKey new];
-	kSBJsonStreamWriterStateObjectValue = [SBJsonStreamWriterStateObjectValue new];
-	kSBJsonStreamWriterStateArrayStart = [SBJsonStreamWriterStateArrayStart new];
-	kSBJsonStreamWriterStateArrayValue = [SBJsonStreamWriterStateArrayValue new];
+	kSBJsonStreamWriterStateStart = [CM_SBJsonStreamWriterStateStart new];
+	kSBJsonStreamWriterStateComplete = [CM_SBJsonStreamWriterStateComplete new];
+	kSBJsonStreamWriterStateError = [CM_SBJsonStreamWriterStateError new];
+	kSBJsonStreamWriterStateObjectStart = [CM_SBJsonStreamWriterStateObjectStart new];
+	kSBJsonStreamWriterStateObjectKey = [CM_SBJsonStreamWriterStateObjectKey new];
+	kSBJsonStreamWriterStateObjectValue = [CM_SBJsonStreamWriterStateObjectValue new];
+	kSBJsonStreamWriterStateArrayStart = [CM_SBJsonStreamWriterStateArrayStart new];
+	kSBJsonStreamWriterStateArrayValue = [CM_SBJsonStreamWriterStateArrayValue new];
 }
 
 #pragma mark Housekeeping
@@ -191,7 +191,7 @@ static SBJsonStreamWriterStateArrayValue *kSBJsonStreamWriterStateArrayValue;
 	if (self) {
 		stream = [stream_ retain];
 		maxDepth = 512;
-		states = calloc(maxDepth, sizeof(SBJsonStreamWriterState*));
+		states = calloc(maxDepth, sizeof(CM_SBJsonStreamWriterState*));
 		NSAssert(states, @"States not initialised");
 		states[0] = kSBJsonStreamWriterStateStart;
 	}
@@ -241,7 +241,7 @@ static SBJsonStreamWriterStateArrayValue *kSBJsonStreamWriterStateArrayValue;
 
 
 - (BOOL)writeObjectOpen {
-	SBJsonStreamWriterState *s = states[depth];
+	CM_SBJsonStreamWriterState *s = states[depth];
 	if ([s isInvalidState:self]) return NO;
 	if ([s expectingKey:self]) return NO;
 	[s appendSeparator:self];
@@ -258,7 +258,7 @@ static SBJsonStreamWriterStateArrayValue *kSBJsonStreamWriterStateArrayValue;
 }
 
 - (BOOL)writeObjectClose {
-	SBJsonStreamWriterState *state = states[depth--];
+	CM_SBJsonStreamWriterState *state = states[depth--];
 	if ([state isInvalidState:self]) return NO;
 	if (humanReadable) [state appendWhitespace:self];
 	[self write:"}" len:1];
@@ -267,7 +267,7 @@ static SBJsonStreamWriterStateArrayValue *kSBJsonStreamWriterStateArrayValue;
 }
 
 - (BOOL)writeArrayOpen {
-	SBJsonStreamWriterState *s = states[depth];
+	CM_SBJsonStreamWriterState *s = states[depth];
 	if ([s isInvalidState:self]) return NO;
 	if ([s expectingKey:self]) return NO;
 	[s appendSeparator:self];
@@ -284,7 +284,7 @@ static SBJsonStreamWriterStateArrayValue *kSBJsonStreamWriterStateArrayValue;
 }
 
 - (BOOL)writeArrayClose {
-	SBJsonStreamWriterState *state = states[depth--];
+	CM_SBJsonStreamWriterState *state = states[depth--];
 	if ([state isInvalidState:self]) return NO;
 	if ([state expectingKey:self]) return NO;
 	if (humanReadable) [state appendWhitespace:self];
@@ -295,7 +295,7 @@ static SBJsonStreamWriterStateArrayValue *kSBJsonStreamWriterStateArrayValue;
 }
 
 - (BOOL)writeNull {
-	SBJsonStreamWriterState *s = states[depth];
+	CM_SBJsonStreamWriterState *s = states[depth];
 	if ([s isInvalidState:self]) return NO;
 	if ([s expectingKey:self]) return NO;
 	[s appendSeparator:self];
@@ -307,7 +307,7 @@ static SBJsonStreamWriterStateArrayValue *kSBJsonStreamWriterStateArrayValue;
 }
 
 - (BOOL)writeBool:(BOOL)x {
-	SBJsonStreamWriterState *s = states[depth];
+	CM_SBJsonStreamWriterState *s = states[depth];
 	if ([s isInvalidState:self]) return NO;
 	if ([s expectingKey:self]) return NO;
 	[s appendSeparator:self];
@@ -390,7 +390,7 @@ static const char *strForChar(int c) {
 }
 
 - (BOOL)writeString:(NSString*)string {	
-	SBJsonStreamWriterState *s = states[depth];
+	CM_SBJsonStreamWriterState *s = states[depth];
 	if ([s isInvalidState:self]) return NO;
 	[s appendSeparator:self];
 	if (humanReadable) [s appendWhitespace:self];
@@ -435,7 +435,7 @@ static const char *strForChar(int c) {
 	if ((CFBooleanRef)number == kCFBooleanTrue || (CFBooleanRef)number == kCFBooleanFalse)
 		return [self writeBool:[number boolValue]];
 	
-	SBJsonStreamWriterState *s = states[depth];
+	CM_SBJsonStreamWriterState *s = states[depth];
 	if ([s isInvalidState:self]) return NO;
 	if ([s expectingKey:self]) return NO;
 	[s appendSeparator:self];
diff --git a/Classes/SBJsonWriter.h b/Classes/SBJsonWriter.h
index 043526c..9f0cb40 100644
--- a/Classes/SBJsonWriter.h
+++ b/Classes/SBJsonWriter.h
@@ -52,7 +52,7 @@
  way you would expect.
  
  */
-@interface SBJsonWriter : SBJsonBase {
+@interface CM_SBJsonWriter : CM_SBJsonBase {
 
 @private
     BOOL sortKeys, humanReadable;
diff --git a/Classes/SBJsonWriter.m b/Classes/SBJsonWriter.m
index 1058ff0..6647794 100644
--- a/Classes/SBJsonWriter.m
+++ b/Classes/SBJsonWriter.m
@@ -31,13 +31,13 @@
 #import "SBJsonStreamWriter.h"
 #import "SBProxyForJson.h"
 
-@interface SBJsonWriter ()
+@interface CM_SBJsonWriter ()
 
 - (NSData*)dataWithObject:(id)value;
 
 @end
 
-@implementation SBJsonWriter
+@implementation CM_SBJsonWriter
 
 @synthesize sortKeys;
 @synthesize humanReadable;
@@ -65,7 +65,7 @@
 - (NSData*)dataWithObject:(id)object {
 	NSOutputStream *stream = [[[NSOutputStream alloc] initToMemory] autorelease];
 	
-	SBJsonStreamWriter *streamWriter = [[[SBJsonStreamWriter alloc] initWithStream:stream] autorelease];
+	CM_SBJsonStreamWriter *streamWriter = [[[CM_SBJsonStreamWriter alloc] initWithStream:stream] autorelease];
 	streamWriter.sortKeys = self.sortKeys;
 	streamWriter.maxDepth = self.maxDepth;
 	streamWriter.humanReadable = self.humanReadable;
